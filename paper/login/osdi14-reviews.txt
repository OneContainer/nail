===========================================================================
                           OSDI '14 Review #140A
                     Updated 4 Jun 2014 3:33:01pm PDT
---------------------------------------------------------------------------
  Paper #140: Nail: A practical tool for parsing and generating data
              formats
---------------------------------------------------------------------------

                      Overall merit: 4. Weak accept

                         ===== Paper summary =====

This paper proposes a tool that simplifies the creation of "correct and secure" parsers for file formats and communication protocols. The key idea is to define a grammar that lets programmers define a parser and automatically generate both the data format in the actual file or packet data as well as the internal data-structures used by the application to represent the corresponding data --- without having the programmer write actions to build the data-structures in memory. Guaranteeing that equivalence leads to more secure implementation.

                      ===== Comments for author =====

I enjoyed reading this paper. I especially liked that the evaluation explored well defined questions. I suggest though that the authors improve the motivation by giving more information and more emphasis on the non-memory security bugs, since those are much more likely to be addressed by other tools/analysis or by using  a different programming language. 

A few comments to help presentation:

* The paper makes some noise about "semantic bisection" early on but then kind of abandons that. I get it that this is important to improve security properties of the implementation, but the text does not discuss that clearly and I think that is important to make the case cleanly. 

* If I understood correctly, pretty much all useful parsers will need "transformations", which involve arbitrary code. Wouldn't that compromise the security properties?

             ===== Questions to address in the response =====

Can you comment on whether the arbitrary code in the  "transformations" can compromise the security properties of the resulting parser?

===========================================================================
                           OSDI '14 Review #140B
                     Updated 8 Jun 2014 8:18:04pm PDT
---------------------------------------------------------------------------
  Paper #140: Nail: A practical tool for parsing and generating data
              formats
---------------------------------------------------------------------------

                      Overall merit: 4. Weak accept

                         ===== Paper summary =====

This paper describes Nail, a tool for automatically creating parsers
and generators for data formats based upon a custom specification
language.  Nail improves upon previous approaches by using a single
specification to generate both parsers and generators (most previous
work focuses just on the parsing half), and for developing two
mechanisms to deal with thorny aspects of data formats (e.g.,
dependent variables like lengths and checksums).  The paper applies
Nail to two challenging data formats, DNS and zip, to demonstrate that
it can handle complex applications in practice.

                      ===== Comments for author =====

I enjoyed the paper and I find the general argument of using tools to
generate code to reduce bugs and security vulnerabilities an appealing
one.  However, I am not that familiar with the details of the previous
work in the area or the programming language techniques employed in
Nail.  The paper is well written and speaks with authority.  So I am
generally positive about the paper, but temper it since I'm hardly an
expert.

Taking the benefits of Nail at face value, then the key challenge
facing tools like Nail is adoption.  The compelling argument for a
tool like Nail is fewer bugs and improved security.  The only way such
claims are going to be proved is for Nail to be used in practice in
generating code that gets deployed and is the focus of attacks.  So
how do you get tools like Nail to be used in deployed code?  Both the
DNS and zip implementations generated by Nail are functional, but fall
short of a full implementation.  What would it take to integrate
Nail's implementation into standard tools?  If the gaps are not
fundamental to the approach, then how much work remains?

Along those lines, are you going to make Nail available for download?
If someone wanted to use Nail in an implementation, could they?

Section 4.1: "Therefore, Nail introduces transformations, which allow
arbitrary code by the programmer to interact with the parser and
generator."  If I were to attack software that used Nail,
transformations would be the first place I would start: if there are
weaknesses in the implementation, they would likely be here.  Are
there additional constraints that transformations word under that make
them easier to implement and thereby reduce the probability of
vulnerabilities?  Or can the only argument that be made is that Nail
reduces the amount of code that is manually generated to just
transformations?

Similarly Section 4.4: "This transformation must be carefully written
to not have bugs."  Doesn't that go without saying for any code that
can be potentially attacked?

Section 6.1: You are now experts on real-world data formats and the
headaches they create for tools to deal with them automatically.
Since there will undoubtedly be new formats defined in the future, do
you have any best-practice guidelines or recommendations you can give
to format/protocol designers, or at least practices to avoid?

Section 6.3: It is difficult to evaluate the improved security that
Nail should provide, and you do what you can in arguing that Nail
implementations do not suffer from previous vulnerabilities.  But if
you release Nail, or even just your DNS and zip implementations,
you'll take a big step forward in terms of arguing the benefits of
Nail itself and automated parser/generator creation in general.  It
would be great to hand Nail and its DNS and zip to a grad security
course and have them hammer on it and try to break it.

             ===== Questions to address in the response =====

How do you go from Nail-generated prototypes to integrating
Nail-generated code into deployed software?

===========================================================================
                           OSDI '14 Review #140C
                    Updated 15 Jul 2014 11:55:17am PDT
---------------------------------------------------------------------------
  Paper #140: Nail: A practical tool for parsing and generating data
              formats
---------------------------------------------------------------------------

                      Overall merit: 5. Accept

                      ===== Comments for author =====

I quite liked this.  Solves a reasonable problem, well motivated by contemporary security problems arising from real-world parsing problems, and has been applied to three different and non-trivial examples to good effect.  I have no real complaints about this work, only a few little quibbles and concerns.  Accept!


(typo section 5:  "And option for C++" -> An option

===========================================================================
                           OSDI '14 Review #140D
                     Updated 8 Jul 2014 9:54:24am PDT
---------------------------------------------------------------------------
  Paper #140: Nail: A practical tool for parsing and generating data
              formats
---------------------------------------------------------------------------

                      Overall merit: 2. Reject

                         ===== Paper summary =====

Nail is a tool for generating both parsers and generators for a wide
variety of binary data formats.  The motivation for Nail is that such
parsers tend to be a source of security holes, especially because the
grammar and internal object model are usually decoupled; Nail couples
them so that the programmer doesn’t have to think about things twice.
Nail also has explicit mechanisms for handling tricky issues such as
length fields, offsets, etc.

                      ===== Comments for author =====

Well-motivated problem.  Possibly(*) a nice design.  Wrong conference.

(*) “possibly” because I’m a reviewer for an OS conference, and I don’t
know enough about the existing literature for PL and security fields to
have a clear idea about the novelty or soundness of this work.

Anyway: some additional comments:

(1) the paper makes a big deal about the coupling of grammar and
internal data structure, but it never really exposes what a Nail-generated
internal data structure looks like — just a bunch of pieces of it.

(2)  Also, the grammar for Nail itself is only partially described, mostly by example;
e.g., page 7 describes the “Wrap combinator” but one has to read line 39
of figure 2 to infer that this is what the < > notation is used for.

(3) Nail provides security until it does’t (cf. the statement on p 8
that “This transformation must be carefully written not to have bugs.”
kind of a true statement for any piece of code, right?)

(4) The grammar seems somewhat hacky to me … maybe I don’t know enough
about fancy grammars (but then, hey, wrong conference!)

(5) The paper repeatedly claims that the Nail-based DNS server is faster
than BIND … and then in the last paragraph (before Conclusion) it admits
that BIND does a load of other things.  So: not an apples-to-apples
comparison, but someone reading just the abstract or introduction wouldn’t
necessarily realize that.

(6) The paper sometimes uses jargon that not everyone could be expected
to know.  E.g., I realized what “ROP-attacks” means, because I’ve read
papers about return-oriented programming … but the paper doesn’t define
this acronym (and why not cite a primary source, such as
http://cseweb.ucsd.edu/~hovav/dist/rop.pdf, rather than [4]?)

(7) I can see that DNS and ZIP parsers are tricky.  But the other
examples in figure 6 leave me feeling “what’s the big deal?”  Are
there lots of buggy UDP parsers out there?

===========================================================================
                           OSDI '14 Review #140E
                     Updated 7 Jul 2014 12:13:48am PDT
---------------------------------------------------------------------------
  Paper #140: Nail: A practical tool for parsing and generating data
              formats
---------------------------------------------------------------------------

                      Overall merit: 5. Accept

                         ===== Paper summary =====

This paper describes a parsing tool called Nail that uses a single grammar specification for parsing and to internally represent objects.

                      ===== Comments for author =====

Insecure parsing is an incredibly important problem that hasn't received enough attention from the research community (as far as I know). Nail seems like a great tool for improving the robustness of many systems.

Using the grammar to define a re-usable object representation is clever and powerful. 

The main technique that Nail uses to make parsing safe is to eliminate semantic actions. However, Nail transformations seem equally unsafe. The authors should do a better job clearly articulating why are transformations more trustworthy or less error prone than normal semantic action code. Is the argument for Nail’s better safety that there is less error prone code, that transformations are less error prone themselves, or a combination of the two?

Nail grammars are remarkably compact and easy to read.

Having said that, it was a little unclear how a programmer actually uses a Nail grammar. Since there are no semantic actions, at what point does user code execute (aside from transformations)? Does client code hand off a file descriptor with the input stream to a Nail library and receive an object representing the input in return. How does the program interact with the internal representation, especially since dependent fields are not exposed through the internal model?

How does error handling work? For example, can a programmer define a callback in case a network message is malformed? How much of the parsing context can be exposed to the error handler. This would be useful for logging information about bad input. 

Given that PDF parsing has caused so much trouble (at least on iOS), how hard would it be to write a PDF parser in Nail? Is there a reason why you haven’t done this yet?

Why is the Nail DNS server faster? Is it just because it does less or does Nail fundamentally reduce the amount of work a parser needs to do?

             ===== Questions to address in the response =====

How does user code interact with a Nail grammar and library?

===========================================================================
                           OSDI '14 Review #140F
                     Updated 8 Jul 2014 3:27:52am PDT
---------------------------------------------------------------------------
  Paper #140: Nail: A practical tool for parsing and generating data
              formats
---------------------------------------------------------------------------

                      Overall merit: 4. Weak accept

                         ===== Paper summary =====

The paper presents Nail, a tool for automatically implementing
protocols based off of a programmer-specified grammar.  The vision for
Nail is that the programmer writes only the (simpler) grammar and the
tool generates the actual data structures and encoding to be
transferred between processes.  Automating this process is claimed to
both reduce overall programmer effort and the introduction of security
bugs.  The Nail tool is released as open-source software.

                      ===== Comments for author =====

Overall I find this to be a very interesting paper applying techniques
that I instinctively associate with compilers and programming
languages to concrete system development.  

I would like to know more about the experience of programming with
Nail-produced objects.  The psuedocode in Figure 5 doesn't do much to
help me understand how Nail application logic would look.  Is there
anything special on this front, or should I consider Nail to be a
drop-in replacement for protobuff?  Looking specifically at the ZIP
case study: how easy/difficult would it be to implement the optimized
versions of the compression algorithms with Nail?

===========================================================================
                           OSDI '14 Review #140G
                    Updated 14 Jul 2014 10:53:13am PDT
---------------------------------------------------------------------------
  Paper #140: Nail: A practical tool for parsing and generating data
              formats
---------------------------------------------------------------------------

                      Overall merit: 5. Accept

                         ===== Paper summary =====

This paper presents a data parsing and generating framework designed with a primary goal of helping to security-harden the often-vulnerable parsing portions of common software.  The key ideas the paper introduces are: (a) employing a specification paradigm that systematically supports not only parsing but generation, by preserving bijectivity in the specification; (b) several provisions for handling realistic, complex streams, such as dependent choices (analogous to dependent types in PLs), separation into multiple logical streams, and custom "transforms"; (c) an emphasis on security in implementation and evaluation.

                      ===== Comments for author =====

I like this paper a lot; it's the first I've seen that really tries to place parsing security front-and-center, and does a rather systematic, pragmatic job of developing ways to deal with all the ugly complexities of existing ad hoc data formats.  Many of the techniques the authors come up with for this purpose do feel a bit ad hoc, but not all, and an ad hoc approach is probably somewhat unavoidable given the nature of the problem.  Overall, the paper seems quite solid and worthy of publication.

A few weaknesses are: (a) it doesn't really get into the security side as deeply as I'd like; (b) only two "realistic" examples - DNS and Zip - offer somewhat limited evidence that the system is really general; (c) the argument for the importance of bijectivity actually seems undercut a bit by the focus on security, because security doesn't seem so important when you're producing data (unless YOU'RE the attacker :) ).  Nevertheless, I don't see any of these weaknesses as show-stopping.

The paper also misses some related work, although I don't think any of these really get at the particular angle the authors are exploring in this paper:

- DataScript–a Specification and Scripting Language for Binary Data
- PADS: A domain-specific language for processing ad hoc data
- The Next 700 Data Description Languages

Sections 2 and 3 are both a bit long and verbose, and could probably be
trimmed down significantly (leaving more room for technical content)
without losing any important information.

The bullets at the start of section 4 seem redundant with the earlier intro
and motivation text.  You can probably make do with just a brief 1-paragraph
lead-in for sec 4.

Nitpicks:

sec 1 mentions PEGs but missing relevant citation (POPL '04)

sec 5 typo "And option for"

===========================================================================
               Response by Julian Bangert <bangert@mit.edu>
  Paper #140: Nail: A practical tool for parsing and generating data
              formats
---------------------------------------------------------------------------
First of all, thanks for the reviews and the feedback!  Here are our
answers and clarifications:

* Do all practical grammars require transformations? 

No, not all protocols require transformations.  Our Ethernet stack
implementation (with ARP, etc), for example, can be handled by Nail
without transformations.

* Do transformations compromise the security guarantees of the parser?

Bugs in transformations can compromise security, but we expect that
transformations are much less likely to contain bugs, compared to complete
hand-written parsers, for three reasons:

1. Transformations are much smaller than an entire hand-written parser.
   For example, our Zip transformations are 78 lines of code, compared
   to 1600 lines of code for an entire parser.

2. There are many common transformations that can be shared between
   grammars, and that come with Nail in a standard library.  For
   example, the entire UDP stack, which uses checksum and length field
   transformations, does not use any custom-written transformations
   of its own; the checksum and length transforms are part of Nail's
   standard transform library (which is used by DNS and ZIP as well).

3. The code for transformations involves fewer tricky aspects than
   writing a parser, in the following ways:

   a. Nail provides convenient and safe interfaces for accessing streams,
      safely allocating memory, etc.

   b. If the transformation requires dependent variables (e.g., a length
      field or the ZIP compression method), Nail parses and validates
      those fields, and passes the result to the transformation function.

As a result, writing transformation functions is less error-prone
than writing a parser.

* How can Nail be integrated into deployed software?

Nail and all examples and applications have been released as open
source; we did not provide a link due to anonymity requirements.  We are
talking with the Tor developers to replace their hand-written protocol
implementation with Nail-generated code. Furthermore, our example DNS
server implements enough features to work as a typical authoritative name
server (the glue records omitted are only necessary to avoid circular
dependencies when delegating name servers in certain conditions; a
typical website domain does not need them).

* How does the application code interact with Nail?

The programmer can either provide a pointer to an in-memory buffer
or provide a stream implementation (methods for reading, writing and
repositioning). Nail then provides functions that turn a stream into an
object and vice versa. For example, our DNS grammar exposes two functions:

  int gen_dnspacket(NailArena *arena, NailStream *out, dnspacket *val);
  dnspacket *parse_dnspacket(NailArena *arena, const uint8_t *data, size_t size);

Our benchmarks use memory buffers for network protocols and memory-mapped
files for the ZIP archiver. For debugging, an error message mode can be
turned on in which Nail will report which rules it failed or succeeded
to apply at what position in the stream. However, in production code,
all error handling is explicitly disabled and Nail returns either a
valid object or nothing at all, so that programs do not partially process
invalid inputs.  A detailed argument for this approach can be found in [4].

If the grammar requires a specialized transformation (e.g., for ZIP
files), the programmer needs to implement that code.  Figure 5 shows an
example sketch of a transformation: namely, the offset transformation
provided by Nail's standard library.

* Is Nail systems research?

We believe Nail is a good fit for a systems conference because it
provides a practical solution to an important problem facing real-world
systems software.  The overall contribution lies in showing how to
build a complete system that addresses this problem.  Of course, Nail
builds on prior work in parsing and languages, and in those areas,
the paper describes several systems insights that make Nail work well:
transformations (a pragmatic way of side-stepping the limited language
that our parsing algorithm understands), reduced expressive power
in the grammar due to a lack of semantic actions (which aren't great
from a language/parser standpoint, but in practice work well for many
real-world data formats), semantic bijections (a way of side-stepping
degrees of freedom in real-world formats), etc.  Related work has also
appeared at systems conferences: e.g., PacketTypes at SIGCOMM.


